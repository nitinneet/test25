---
name: amis-workflow

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - 'v*'
  schedule:
  - cron: "0 0 * * 0"

jobs:
  publish-amis-to-marketplace:
    needs:
      - release-hold
      - ami-hold
    if: ${{ needs.path_filter.outputs.should_skip != 'true' }}
    name: publish-amis-to-marketplace job
    runs-on: ubuntu-latest
    env:
      MAGMA_ROOT: "${{ github.workspace }}"
      MAGMA_ROOT: /home/circleci/project
      CODE_DIR: "${{ github.workspace }}/experimental/cloudstrapper"
      VARS_DIR: "${{ github.workspace }}/experimental/cloudstrapper/playbooks/roles/vars"
      WORK_DIR: "${{ github.workspace }}/home/circleci/project/experimental/cloudstrapper/playbooks"
      AWS_ACCOUNT: "LF"
    steps:
      - uses: actions/checkout@v2
      - name: Run apt
        run: sudo apt-get update && sudo apt -y upgrade
      - name: setup pyenv
        uses: "gabrielfalcao/pyenv-action@v8"
        with:
          default: 3.7.0  
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install Dependencies
        run: |
            pip install ansible awscli boto3
            sudo apt-get update
      - name: Propagate AWS credentials to ansible and create version
        run: |
            if [ "${{ env.AWS_ACCOUNT }}" = "FB" ]; then
              sed -i -e "${{ secrets.FB_AWS_ACCESS_KEY }}"  $VARS_DIR/secrets.yaml
              sed -i -e "${{ secrets.FB_AWS_ACCESS_KEY }}"  $VARS_DIR/secrets.yaml
              echo export VERSION="1.6.0-${{ github.sha }}" >> $BASH_ENV
              echo export PACKAGE_VERSION="1.6.0" >> $BASH_ENV
              # When focal-ci is clean we will be able to dynamically fetch latest ci debian packages
            elif  [ "${{ env.AWS_ACCOUNT }}" = "LF" ]; then
              sed -i -e "${{ secrets.LF_AWS_ACCESS_KEY }}"  $VARS_DIR/secrets.yaml
              sed -i -e "${{ secrets.LF_AWS_ACCESS_KEY }}"  $VARS_DIR/secrets.yaml
              echo export PACKAGE_VERSION="1.7.0" >> $BASH_ENV
              echo export VERSION="1.7.0" >> $BASH_ENV
            fi
            echo export PACKAGE_REPO_HOST="artifactory.magmacore.org\\\/artifactory\\\/debian" >> $BASH_ENV
            echo export GIT_REF="${{ github.sha }}" >> $BASH_ENV
      - name: Propagate AWS region information 
        run: |
            sed -i -e '/^awsAgwRegion: /s/:.*$/: us-east-1/' $VARS_DIR/cluster.yaml
            sed -i -e '/^awsOrc8rRegion: /s/:.*$/: us-east-1/' $VARS_DIR/cluster.yaml
            sed -i -e '/^awsAgwAz: /s/:.*$/: us-east-1b/' $VARS_DIR/cluster.yaml
            sed -i -e '/^buildAwsRegion: /s/:.*$/: us-east-1/' $VARS_DIR/build.yaml
            sed -i -e '/^buildAwsAz: /s/:.*$/: us-east-1b/' $VARS_DIR/build.yaml
      - name: Propagate names for AWS essential components
        run: |
            sed -i -e '/^secgroupDefault: /s/:.*$/: publish-amis-to-marketplace-secgroup/' $VARS_DIR/defaults.yaml
            sed -i -e '/^bucketDefault: /s/:.*$/: publish-amis-to-marketplace-bucket2/' $VARS_DIR/defaults.yaml
            sed -i -e '/^stackEssentialsDefault: /s/:.*$/: publish-amis-to-marketplace-stack/' $VARS_DIR/defaults.yaml
            sed -i -e '/^keyBoot: /s/:.*$/: publish-amis-to-marketplace-keyboot/' $VARS_DIR/defaults.yaml
            sed -i -e '/^keyHost: /s/:.*$/: publish-amis-to-marketplace-keyhost/' $VARS_DIR/defaults.yaml
      - name: Setup AWS essentials components
        run: |
            ansible-playbook ${{ env.MAGMA_ROOT }}/aws-prerequisites.yaml -e "dirLocalInventory=$VARS_DIR" --tags keyCreate,essentialsCreate
      - name: Propagate Tags for Cloudstrapper instances
        run: |
            sed -i -e '/^devOpsCloudstrapper: /s/:.*$/: publishAmisToMarketplaceDevopsCloudstrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^primaryCloudstrapper: /s/:.*$/: publishAmisToMarketplacePrimaryCloudstrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^stackDevOpsCloudstrapper: /s/:.*$/: publish-amis-to-marketplace-stack-devopscloustrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^stackCloudstrapper: /s/:.*$/: publish-amis-to-marketplace-stack-cloustrapper/' $VARS_DIR/defaults.yaml
            sed -i -e '/^devOpsAmi: /s/:.*$/: cloudstrapper-'"$VERSION"'/' $VARS_DIR/defaults.yaml
            sed -i -e '/^buildUbuntuAmi: /s/:.*$/: ami-09e67e426f25ce0d7/' $VARS_DIR/build.yaml
            sed -i -e '/^buildAgwVersion: /s/:.*$/: '"$GIT_REF"'/' $VARS_DIR/build.yaml
            sed -i -e '/^buildAgwPackage: /s/:.*$/: '"$PACKAGE_VERSION"'/' $VARS_DIR/build.yaml
            sed -i -e '/^taggedVersion: /s/:.*$/: '"$VERSION"'/' $VARS_DIR/build.yaml
      - name: Generate Cloudstrapper AMI
        timeout-minutes: 30
        run: |
            ansible-playbook ${{ env.MAGMA_ROOT }}/devops-provision.yaml -e "dirLocalInventory=$VARS_DIR"
            echo "Waiting one minute for the instance to boot up."
            sleep 60
            ansible-playbook ${{ env.MAGMA_ROOT }}/devops-configure.yaml -e "devops=tag_Name_publishAmisToMarketplaceDevopsCloudstrapper" -e "dirLocalInventory=$VARS_DIR" -i $VARS_DIR/common_instance_aws_ec2.yaml -u ubuntu --skip-tags usingGitSshKey,buildMagma,pubMagma,helm,pubHelm
            ansible-playbook ${{ env.MAGMA_ROOT }}/devops-init.yaml -e "dirLocalInventory=$VARS_DIR"
      - name: Notify success to Slack
        if: success() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*Cloudstrapper AWS AMI artifacts have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Cloud workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
      - name: Propagate variables for AGW AMI build
        run: |
            sed -i -e '/^buildAgwAmiName: /s/:.*$/: agw-ami-'"$VERSION"'/' $VARS_DIR/build.yaml
            sed -i -e '/^buildGwTagName: /s/:.*$/: publishAmisToMarketplaceAgw/' $VARS_DIR/build.yaml
            sed -i -e '/^packageRepoHost: /s/:.*$/: '"$PACKAGE_REPO_HOST"'/' $VARS_DIR/build.yaml
            sed -i -e '/^awsAgwAmi: /s/:.*$/: ami-09e67e426f25ce0d7/' $VARS_DIR/cluster.yaml
      - name: Generate AGW AMI
        timeout-minutes: 30
        run: |
            ansible-playbook ${{ env.MAGMA_ROOT }}/agw-provision.yaml -e "idSite=DevOps" -e "idGw=publishAmisToMarketplaceAgw" -e "dirLocalInventory=$VARS_DIR" --tags infra,inventory  -e "agwDevops=1" --skip-tags createBridge,cleanupBridge,cleanupNet
            echo "Waiting one minute for the instance to boot up."
            sleep 60
            ansible-playbook ${{ env.MAGMA_ROOT }}/ami-configure.yaml -i "$VARS_DIR/common_instance_aws_ec2.yaml" -e "dirLocalInventory=$VARS_DIR" -e "aminode=tag_Name_publishAmisToMarketplaceAgw" -e "ansible_python_interpreter=/usr/bin/python3" -u ubuntu
            ansible-playbook ${{ env.MAGMA_ROOT }}/ami-init.yaml -e "dirLocalInventory=$VARS_DIR"
      - name: Export qcow2 image for fb aws account in s3
        timeout-minutes: 30
        run: |
            if [ "<<parameters.aws_account>>" = "FB" ]; then
              ansible-playbook ${{ env.MAGMA_ROOT }}/devops-convert-to-qcow2.yaml -e "dirLocalInventory=$VARS_DIR" -e "agwAmiName=agw-ami-$VERSION"
            fi
      - name: Clean AWS resources
        if: always()
        run: |
            ansible-playbook ${{ env.MAGMA_ROOT }}/cleanup.yaml -e "dirLocalInventory=$VARS_DIR" --tags agw,subnet,secgroup,vpc,keys --skip-tags orc8r  -e "{"deleteStacks": [stackDevOpspublishAmisToMarketplaceAgw, publish-amis-to-marketplace-stack-devopscloustrapper, publish-amis-to-marketplace-stack, stackDevOpsNetwork]}"
      - name: Notify success to Slack
        if: success() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ARTIFACTS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_OSS }}
          SLACK_TITLE: "*AGW AWS AMI artifacts have been published*"
          SLACK_MESSAGE: "${{ steps.commit.outputs.title}}"
          SLACK_USERNAME: "Cloud workflow"
          SLACK_ICON_EMOJI: ":heavy_check_mark:"
          SLACK_COLOR: "#00FF00"
          SLACK_FOOTER: ' '
